name: CI-CD-Pipeline

on:
  push:
    branches:
      - test
  workflow_dispatch:
    inputs:
      recreate_cluster:
        description: 'Recreate EKS cluster on each run'
        required: false
        default: 'false'

env:
  VENV: myenv
  USER_NAME: rakshitsen
  IMAGE_NAME: better-assess-image
  AWS_REGION: ap-south-1
  CLUSTER_NAME: demo-cluster

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    defaults:
      run:
        shell: bash

    steps:

    - name: Checkout Code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.x'

    - name: Install Python Dependencies
      run: |
        python -m venv $VENV
        source $VENV/bin/activate
        pip install --upgrade pip
        pip install -r requirements.txt

    - name: Run Unit Tests
      run: |
        source $VENV/bin/activate
        pytest

    - name: Linting
      continue-on-error: true
      run: |
        source $VENV/bin/activate
        flake8 .

    - name: Docker Build
      run: |
        docker build -t $USER_NAME/$IMAGE_NAME:${{ github.run_number }} .

    - name: Docker Security Scan with Trivy
      run: |
        docker run --rm -v /var/run/docker.sock:/var/run/docker.sock \
        aquasec/trivy image $USER_NAME/$IMAGE_NAME:${{ github.run_number }}

    - name: Docker Login & Push
      env:
        DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
        DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
      run: |
        echo "$DOCKER_PASSWORD" | docker login -u "$DOCKER_USERNAME" --password-stdin
        docker push $USER_NAME/$IMAGE_NAME:${{ github.run_number }}
        docker logout

    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Conditionally Recreate EKS Cluster
      if: github.event.inputs.recreate_cluster == 'true'
      run: |
        eksctl create cluster \
          --name $CLUSTER_NAME \
          --region $AWS_REGION \
          --nodegroup-name ng1 \
          --node-type t3.medium \
          --nodes 2

        eksctl utils associate-iam-oidc-provider --cluster $CLUSTER_NAME --approve --region $AWS_REGION

        curl -O https://raw.githubusercontent.com/kubernetes-sigs/aws-load-balancer-controller/v2.11.0/docs/install/iam_policy.json

        aws iam create-policy \
          --policy-name AWSLoadBalancerControllerIAMPolicy \
          --policy-document file://iam_policy.json || true

        aws_account_id=$(aws sts get-caller-identity --query Account --output text)

        eksctl create iamserviceaccount \
          --cluster $CLUSTER_NAME \
          --namespace kube-system \
          --name aws-load-balancer-controller \
          --role-name AmazonEKSLoadBalancerControllerRole \
          --attach-policy-arn arn:aws:iam::$aws_account_id:policy/AWSLoadBalancerControllerIAMPolicy \
          --approve \
          --region $AWS_REGION || true

    - name: Deploy to EKS
      run: |
        aws eks --region $AWS_REGION update-kubeconfig --name $CLUSTER_NAME
        kubectl apply -f namespace.yml
        sed -i "s|image:latest|$USER_NAME/$IMAGE_NAME:${{ github.run_number }}|g" deployment.yml
        kubectl apply -f deployment.yml
        kubectl apply -f service.yml

    - name: Install Ingress Controller and Apply Ingress
      run: |
        aws eks --region $AWS_REGION update-kubeconfig --name $CLUSTER_NAME

        if ! kubectl get deployment -n kube-system aws-load-balancer-controller; then
          echo "Installing AWS Load Balancer Controller..."

          VPC_ID=$(aws eks describe-cluster \
            --name $CLUSTER_NAME \
            --region $AWS_REGION \
            --query "cluster.resourcesVpcConfig.vpcId" \
            --output text)

          helm repo add eks https://aws.github.io/eks-charts
          helm repo update

          helm install aws-load-balancer-controller eks/aws-load-balancer-controller -n kube-system \
            --set clusterName=$CLUSTER_NAME \
            --set serviceAccount.create=false \
            --set serviceAccount.name=aws-load-balancer-controller \
            --set region=$AWS_REGION \
            --set vpcId=$VPC_ID

          echo "Waiting for webhook to be ready..."
          sleep 90
        else
          echo "Controller already installed. Skipping."
        fi

        kubectl apply -f ingress.yml

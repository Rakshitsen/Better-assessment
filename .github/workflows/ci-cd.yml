name: CI/CD Pipeline

on:
  push:
    branches: [main]
  workflow_dispatch:
    inputs:
      RECREATE_CLUSTER:
        description: 'Recreate EKS cluster on each run'
        required: false
        default: 'false'

env:
  VENV: myenv
  USER_NAME: rakshitsen
  IMAGE_NAME: Github-Better-Image
  AWS_REGION: ap-south-1
  CLUSTER_NAME: demo-cluster

jobs:
  build:
    runs-on: ubuntu-latest
    environment: production

    steps:
      - name: Checkout SCM
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: 3.11

      - name: Install dependencies
        run: |
          python3 -m venv $VENV
          source $VENV/bin/activate
          pip install --upgrade pip
          pip install -r requirements.txt

      - name: Unit test
        run: |
          source $VENV/bin/activate
          pytest

      - name: Linting
        run: |
          source $VENV/bin/activate
          flake8 .
        continue-on-error: true

      - name: Build Docker image
        run: |
          docker build -t ${{ env.USER_NAME }}/${{ env.IMAGE_NAME }}:${{ github.run_number }} .

      - name: Security Scan with Trivy
        uses: aquasecurity/trivy-action@v0.14.0
        with:
          image-ref: ${{ env.USER_NAME }}/${{ env.IMAGE_NAME }}:${{ github.run_number }}

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Push Docker image
        run: |
          docker push ${{ env.USER_NAME }}/${{ env.IMAGE_NAME }}:${{ github.run_number }}

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Conditionally Create EKS Cluster
        if: ${{ github.event.inputs.RECREATE_CLUSTER == 'true' }}
        run: |
          eksctl create cluster \
            --name $CLUSTER_NAME \
            --region $AWS_REGION \
            --nodegroup-name ng1 \
            --node-type t3.medium \
            --nodes 2

      - name: Deploy to EKS
        run: |
          aws eks --region $AWS_REGION update-kubeconfig --name $CLUSTER_NAME
          kubectl apply -f namespace.yml
          sed -i "s|image:latest|${{ env.USER_NAME }}/${{ env.IMAGE_NAME }}:${{ github.run_number }}|g" deployment.yml
          kubectl apply -f deployment.yml
          kubectl apply -f service.yml
          kubectl get service -n project
